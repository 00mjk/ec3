network publica (outbound = 'yes' and outports = '8899/tcp,6817/tcp,6818/tcp,111/tcp,111/udp,2046/tcp,2046/udp,2047/tcp,2047/udp,2048/tcp,2048/udp,2049/tcp,2049/udp')
network privada ()

system front (
cpu.arch='x86_64' and
cpu.count>=1 and
memory.size>=512m and
net_interface.0.connection = 'publica' and
net_interface.0.dns_name = 'slurmserver' and
net_interface.1.connection = 'privada' and
queue_system = 'slurm'
)

configure Ubuntu (
@begin
      SLURM_PATH: /home/ubuntu/slurm-2.5.7
      HOME: /home/ubuntu
@end
)

configure Debian (
@begin
      SLURM_PATH: /home/ubuntu/slurm-2.5.7
      HOME: /home/ubuntu
@end
)

configure Scientific (
@begin
      SLURM_PATH: /root/slurm-2.5.7
      HOME: /root
@end
)

configure CentOS (
@begin
      SLURM_PATH: /root/slurm-2.5.7
      HOME: /root
@end
)

# Uso los de RHEL por defecto
configure osdefaults (
@begin
      SLURM_PATH: /root/slurm-2.5.7
      HOME: /root
@end
)

configure slurmwn (
@begin
---
    #SLURM dependences 
    - name: update repositories cache and apt install slurm dependences in Deb systems
      action: apt pkg=libmunge2,libpq5,openssl-blacklist,munge,slurm-llnl-basic-plugins,libmunge-dev,gcc,make  update_cache=yes cache_valid_time=3600
      when: debian_os

    - name: update repositories cache and yum install slurm dependences in REL systems
      action: yum pkg=readline-devel,openssl-devel,munge-devel pam-devel perl-ExtUtils-MakeMaker,gcc-c++,make
      when: redhat_os

    - name: download SLURM package
      get_url: url=http://www.schedmd.com/download/archive/slurm-2.5.7.tar.bz2 dest={{SLURM_PATH}}.tar.bz2

    - name: decompress SLURM package
      command: tar --bzip -x -f slurm-2.5.7.tar.bz2 chdir={{HOME}} creates={{SLURM_PATH}}

    - name: configure SLURM
      command: ./configure chdir={{SLURM_PATH}} creates={{SLURM_PATH}}/config.log

    - name: compile (make) SLURM
      command: make chdir={{SLURM_PATH}} creates={{SLURM_PATH}}/src/slurmctld

    - name: install SLURM
      command: make install chdir={{SLURM_PATH}} creates=/usr/local/bin/srun

    - name: copy munge.key file from the frontend
      copy: src=/tmp/munge.key dest=/etc/munge/munge.key

    - name: change the owner of munge key
      command: chown munge:munge munge.key chdir=/etc/munge/

    - name: change the permissions of munge key
      command: chmod 400 munge.key chdir=/etc/munge/

    - name: start munge daemon
      command: /etc/init.d/munge start
      ignore_errors: yes

    - name: copy slurm.conf file from the frontend
      copy: src=/usr/local/etc/slurm.conf dest=/usr/local/etc/slurm.conf

    - name: create slurm user
      shell: echo "slurm:x:2000:2000:slurm admin:/home/slurm:/bin/bash" >> /etc/passwd
    - shell: echo "slurm:x:2000:slurm" >> /etc/group
    - command: pwconv

    - name: create folders used by SLURM and set slurm owner
      file: path=/var/spool/slurm state=directory
    - command: chown -R slurm:slurm /var/spool/slurm
    - file: path=/var/log/slurm state=directory
    - command: chown -R slurm:slurm /var/log/slurm

    #- name: prepare epilog files
    #  file: path=/usr/local/slurm state=directory
    #- command: chown -R slurm:slurm /usr/local/slurm
    #- name: copy epilog_controller file from the frontend
    #  copy: src=/usr/local/slurm/epilog_controller dest=/usr/local/slurm/epilog_controller mode=0755
    #- command: chown slurm:slurm /usr/local/slurm/epilog_controller

    - name: start slurmd daemon
      command: slurmd
@end
)

configure front (
@begin
---
  - vars_files:
    - [ "{{ ansible_distribution }}.yml", "osdefaults.yml" ]
    vars:
      NNODES: 10
      VNODES_PREFIX: wnode
      VNODES_SUFFIX:  
      #EPILOG_FILE: 
      #  ec3_file: epilog_controller
      SLURM_CONF_FILE:
        ec3_file: slurm.conf

    tasks:
    - name: create epel.repo
      action: template src=utils/templates/epel-es.repo dest=/etc/yum.repos.d/epel.repo
      when: redhat_os

    # General tasks
    # Manage the /etc/hosts file
    - lineinfile: dest=/etc/hosts regexp='{{VNODES_PREFIX}}{{item}}{{VNODES_SUFFIX}}' line="127.0.0.1 {{VNODES_PREFIX}}{{item}}{{VNODES_SUFFIX}}"
      with_sequence: start=0 end={{NNODES-1}}
    - lineinfile: dest=/etc/hosts regexp='{{ hostvars[item]['IM_NODE_HOSTNAME'] }}' line='{{item}} {{ hostvars[item]['IM_NODE_FQDN'] }} {{ hostvars[item]['IM_NODE_HOSTNAME'] }}'
      with_items: groups.all

    # Install IM
    - name: Install ansible with Pip
      pip: name=IM version=0.1.1
    - name: Give execution permissions to the IM daemon
      file: path=/etc/init.d/im mode=755
    - file: path=/usr/share/im/contextualization/ansible-playbook mode=755
    - command: /sbin/iptables -I INPUT 2 -p tcp --dport 8899:8899 -j ACCEPT
      ignore_errors: yes
    - command: /sbin/iptables -I INPUT -p tcp --dport 8899:8899 -j ACCEPT
      ignore_errors: yes

    - service: name=im state=started

    
    ############################################################################
    #              LRMS Specific Section
    ############################################################################

    #SLURM dependences 
    - name: update repositories cache and apt install slurm dependences in Deb systems
      action: apt pkg=libmunge2,libpq5,openssl-blacklist,munge,slurm-llnl-basic-plugins,libmunge-dev,gcc,make  update_cache=yes cache_valid_time=3600
      when: debian_os

    - name: update repositories cache and yum install slurm dependences in REL systems
      action: yum pkg=readline-devel,openssl-devel,munge-devel pam-devel perl-ExtUtils-MakeMaker,gcc,make
      when: redhat_os

    - name: download SLURM package
      get_url: url=http://www.schedmd.com/download/archive/slurm-2.5.7.tar.bz2 dest={{SLURM_PATH}}.tar.bz2

    - name: decompress SLURM package
      command: tar --bzip -x -f slurm-2.5.7.tar.bz2 chdir={{HOME}} creates={{SLURM_PATH}}

    - name: configure SLURM
      command: ./configure chdir={{SLURM_PATH}} creates={{SLURM_PATH}}/config.log

    - name: comment "Unsupported option" line in select_linear.c
      lineinfile: dest={{SLURM_PATH}}/src/plugins/select/linear/select_linear.c regexp='Unsupported' line='//error("Unsupported option %d for get_nodeinfo.", dinfo);' state=present

    - name: compile (make) SLURM
      command: make chdir={{SLURM_PATH}} creates={{SLURM_PATH}}/src/slurmctld

    - name: install SLURM
      command: make install chdir={{SLURM_PATH}} creates=/usr/local/bin/srun

    #Generate munge key (si no va en redhat, poner lo de la receta de torque)
    - name: generate munge key
      shell: dd if=/dev/urandom bs=1 count=1024 > /etc/munge/munge.key creates=/etc/munge/munge.key

    - name: copy the munge.key to a temp directory
      command: cp /etc/munge/munge.key /tmp/ creates=/tmp/munge.key

    - name: change the owner of munge key
      command: chown munge:munge munge.key chdir=/etc/munge/

    - name: change the permissions of munge key
      command: chmod 400 munge.key chdir=/etc/munge/

    - name: start munge daemon
      command: /etc/init.d/munge start
      ignore_errors: yes

    #Configure SLURM
    - copy:
        dest: /usr/local/etc/slurm.conf
        content: "{{SLURM_CONF_FILE}}"

    - name: configure compute nodes section of slurm.conf
      lineinfile: dest=/usr/local/etc/slurm.conf regexp='NodeName=' line='NodeName=wnode[0-{{IM_WN_NUM_VMS|int - 1}}] CPUs=1 State=UNKNOWN' state=present
      when: IM_WN_NUM_VMS is defined
    - lineinfile: dest=/usr/local/etc/slurm.conf regexp='PartitionName=' line='PartitionName=debug Nodes=wnode[0-{{IM_WN_NUM_VMS|int - 1}}] Default=YES MaxTime=INFINITE State=UP' state=present
      when: IM_WN_NUM_VMS is defined

    - name: create slurm user
      shell: echo "slurm:x:2000:2000:slurm admin:/home/slurm:/bin/bash" >> /etc/passwd
    - shell: echo "slurm:x:2000:slurm" >> /etc/group
    - command: pwconv

    - name: create folders used by SLURM and set slurm owner
      file: path=/var/spool/slurm state=directory
    - command: chown -R slurm:slurm /var/spool/slurm
    - file: path=/var/log/slurm state=directory
    - command: chown -R slurm:slurm /var/log/slurm
    - file: path=/var/slurm/checkpoint state=directory
    - command: chown -R slurm:slurm /var/slurm/checkpoint

    #- name: prepare epilog files
    #  file: path=/usr/local/slurm state=directory
    #- command: chown -R slurm:slurm /usr/local/slurm
    #- copy:
    #    dest: /usr/local/slurm/epilog_controller
    #    content: "{{EPILOG_FILE}}"
    #    mode: 0755
    #- command: chown slurm:slurm /usr/local/slurm/epilog_controller

    # Configure slurm.conf file
    #- name: configure compute nodes section of slurm.conf
    #  lineinfile: dest=/usr/local/etc/slurm.conf regexp='NodeName=' line='NodeName=wnode[0-{{NNODES|int - 1}}] CPUs=1 State=UNKNOWN' state=present
    #- lineinfile: dest=/usr/local/etc/slurm.conf regexp='PartitionName=' line='PartitionName=debug Nodes=wnode[0-{{NNODES|int - 1}}] Default=YES MaxTime=INFINITE State=UP' state=present

    # start SLURM slurmctld daemon
    #- command: slurmctld

    ############################################################################
    #              END LRMS Specific Section
    ############################################################################

    #Pyslurm section
    #Pyslurm dependences 
    - name: update repositories cache and apt install slurm dependences in Deb systems
      action: apt pkg=python-dev,git,cython update_cache=yes cache_valid_time=3600
      when: debian_os

    - name: update repositories cache and yum install slurm dependences in REL systems
      action: yum pkg=python-devel,git,python-pip
      when: redhat_os
    - name: install cython with pip
      action: pip name=cython
      when: redhat_os

    - name: git checkout the pyslurm repository
      git: repo=git://github.com/gingergeeks/pyslurm dest={{HOME}}/pyslurm accept_hostkey=yes

    - name: build pyslurm
      command: python setup.py build --slurm=/usr/local chdir={{HOME}}/pyslurm creates={{HOME}}/pyslurm/pyslurm/pyslurm.c

    - name: install pyslurm
      command: python setup.py install chdir={{HOME}}/pyslurm creates=/usr/local/lib/python2.7/dist-packages/pyslurm


@end
)

deploy front 1


description ec3_control (
    kind = 'component' and
    short = 'Tool for self-management of clusters TORQUE and SLURM.' and
    content = 'This tool dynamically deploys new working nodes to fit increasing load and undeploys idle working nodes.

The tool deploys a system named after the queue name of a job. If there is none, the default system "wn" is deployed instead.

Especial features in system:
- \'ec3_min_instances\': minimum number of nodes with this system configuration; default value is 0.
- \'ec3_max_instances\': maximum number of nodes with this system configuration; a negative value is like no constrain; default value is -1.
- \'ec3_destroy_interval\': some cloud providers pay a certain amount of time in advance, like AWS EC2. The node will be destroyed only when it is idle at the end of the interval expressed by this option in seconds. The default value is 0.
- \'ec3_max_idle_time\': maximum time expressed in seconds a node will stay idle; the default value is 0.
- \'ec3_destroy_safe\': seconds before the deadline set by \'ec3_destroy_interval\' or \'ec3_max_idle_time\' that the node can be destroyed; the default value is 0.
- \'ec3_if_fail\': name of the next system configuration to try after this fails a launch or the number of instances saturates; the default value is \'\'.'
)


configure front (
@begin
---
  - vars:
      RADL_SYSTEM_wn:
        ec3_xpath: /system/*
      RADL_CONF_wn:
        ec3_xpath: /configure/*
      AUTH:
        ec3_xpath: /system/front/auth
      EC3_CONTROL_CONTENT:
        ec3_file: ec3_control.py
      QUEUE_SYSTEM:
        ec3_xpath: /system/front/queue_system
      EC3_CONTROL_TORQUE_WRAPPER_CONTENT:
        ec3_file: ec3_torque.py
      EC3_CONTROL_SLURM_WRAPPER_CONTENT:
        ec3_file: ec3_slurm.py
    tasks:
    - shell: python -m argparse || yum -y install python-argparse
      when: ansible_os_family == "RedHat"
    - file: path=/usr/local/ec3 state=directory
    - copy:
         dest: /usr/local/ec3/ec3_control.py
         content: "{{EC3_CONTROL_CONTENT}}"
         mode: 0755
    - copy:
         dest: /usr/local/ec3/auth.dat
         content: "{{AUTH}}"
    - copy:
         dest: /usr/local/ec3/wn.radl
         content: |
            {{RADL_SYSTEM_wn}}
            {{RADL_CONF_wn}}
    - include: ec3_control_pbs.yml
      when: "{{ QUEUE_SYSTEM == 'torque' }}"
    - include: ec3_control_slurm.yml
      when: "{{ QUEUE_SYSTEM == 'slurm' }}"
    - shell: /usr/local/ec3/ec3_control
@end
)

configure ec3_control_pbs (
@begin
    - include_vars: "{{item}}"
      with_first_found: [ "{{ ansible_os_family }}.yml", "RedHat.yml" ]
    - copy:
         dest: /usr/local/ec3/wrapper.py
         content: "{{EC3_CONTROL_TORQUE_WRAPPER_CONTENT}}"
         mode: 0755
    - copy:
         dest: /usr/local/ec3/ec3_control
         content: |
            #!/bin/bash
            
            cd /usr/local/ec3
            pgrep -f '^python ./ec3_control' || nohup ./ec3_control.py -a auth.dat -r wn.radl -w wrapper.py -l err -ll 0 -c service {{TORQUE_SERVICE}} start >& out &
         mode: 0755
@end
)

configure ec3_control_slurm (
@begin
    - copy:
         dest: /usr/local/ec3/wrapper.py
         content: "{{EC3_CONTROL_SLURM_WRAPPER_CONTENT}}"
         mode: 0755
    - copy:
         dest: /usr/local/ec3/ec3_control
         content: |
            #!/bin/bash
            
            cd /usr/local/ec3
            pgrep -f '^python ./ec3_control' || nohup ./ec3_control.py -a auth.dat -r wn.radl -w wrapper.py -l err -ll 0 >& out &
         mode: 0755
@end
)
